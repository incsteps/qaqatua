import{_ as a,c as t,a as n,o as s}from"./app-DcHSpXOQ.js";const o={};function r(c,e){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="welcome" tabindex="-1"><a class="header-anchor" href="#welcome"><span>Welcome</span></a></h1><p>This is the documentation for the project qaqatua, an encrypt/decrypt site of payloads.</p><p>The aim of this site is to help you to encrypt and decrypt your payloads in a simple way</p><p>Qaqatua is useful for QA&#39;s who needs to deal with microservices where some parts of the payloads need to be encrypted before to send.</p><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use"><span>How to use</span></a></h2><h3 id="create-an-account" tabindex="-1"><a class="header-anchor" href="#create-an-account"><span>Create an account</span></a></h3><p>First of all you need to create an account in Qaqatua, using your email and password.</p><h3 id="login" tabindex="-1"><a class="header-anchor" href="#login"><span>Login</span></a></h3><p>After register, you can login in the site using your email and password.</p><h3 id="create-a-project" tabindex="-1"><a class="header-anchor" href="#create-a-project"><span>Create a Project</span></a></h3><p>In the dashboard you can create a project, where you can configure the default fields you want to enc/dec.</p><p>Also you can provide a key pair (priv and public) to encrypt/decrypt the payloads or let the system generate one for you.</p><h3 id="create-an-access-token" tabindex="-1"><a class="header-anchor" href="#create-an-access-token"><span>Create an Access Token</span></a></h3><p>In settings section you can create an access token to use in your requests. This token is used to authenticate the requests in the site.</p><p><strong>Grab the token once created as it will not be showed again</strong></p><p>Use this token in the header of your requests.</p><h2 id="encrypt" tabindex="-1"><a class="header-anchor" href="#encrypt"><span>Encrypt</span></a></h2><p>After create a project and an access token you can encrypt/decrypt your payloads using the endpoint:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&quot;https://qaqatua/api/encrypt&quot;</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer &lt;your_token&gt;&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;payload&quot;: &quot;your_payload&quot;}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In case you have not specified any &quot;fields&quot; in the project, the payload will not be encrypted/decrypted and the response will be the same ( &#39;{&quot;payload&quot;: &quot;your_payload&quot;}&#39; in this case).</p><p>In case you specified <code>payload</code> as a field to encrypt/decrypt, the response will be a response with the field <code>payload</code> encrypted:</p><p>&#39;{&quot;payload&quot;: &quot;123LSADFDSL2.....==&quot;}&#39;</p><h2 id="decrypt" tabindex="-1"><a class="header-anchor" href="#decrypt"><span>Decrypt</span></a></h2><p>In the same way you can decrypt a payload using the endpoint <code>/api/decrypt</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&quot;https://qaqatua/api/decrypt&quot;</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer &lt;your_token&gt;&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;payload&quot;: &quot;123213....==&quot;}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The response will be the decrypted payload, &#39;{&quot;payload&quot;: &quot;your_payload&quot;}&#39; in this case.</p>`,26)]))}const i=a(o,[["render",r]]),l=JSON.parse('{"path":"/","title":"Welcome","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"How to use","slug":"how-to-use","link":"#how-to-use","children":[{"level":3,"title":"Create an account","slug":"create-an-account","link":"#create-an-account","children":[]},{"level":3,"title":"Login","slug":"login","link":"#login","children":[]},{"level":3,"title":"Create a Project","slug":"create-a-project","link":"#create-a-project","children":[]},{"level":3,"title":"Create an Access Token","slug":"create-an-access-token","link":"#create-an-access-token","children":[]}]},{"level":2,"title":"Encrypt","slug":"encrypt","link":"#encrypt","children":[]},{"level":2,"title":"Decrypt","slug":"decrypt","link":"#decrypt","children":[]}],"git":{},"filePathRelative":"README.md"}');export{i as comp,l as data};
